/*   
 *  1. 객체지향 프로그램
 *     기능별 분리해서 클래스와 클래스간의 연결해서 처리
 *                                ---------- 메소드
 *     => 조립식  
 *     예) 컴퓨터
 *         CPU / 하드디스크 / 모니터 / 메모리 ...
 *         -------------------------------- 클래스
 *         메인보드에 조립
 *         -----------
 *     => 클래스
 *         1) 사용자 정의 데이터형 => 데이터형 클래스
 *                               -----------
 *                               => 관련된 데이터를 모아서 관리
 *                               => ~VO,~DTO
 *         2) 한개의 기능 (메소드) => 액션 클래스
 *                                => 데이터를 활용하는 메소드
 *                                => ~DAO , ~Model
 *                                
 *    => JSP => 사라지는 경향
 *    => Front / Back
 *    
 *   class ClassName
 *   {
 *      구성요소
 *      ---------------------------
 *        ***변수 : 맴버변수 , 공유변수 => 다른 클래스에서 사용이 가능
 *        기본형(정수,실수,논리,문자,문자열,배열)
 *      ---------------------------
 *       생성사 : 맴버변수에 초기화 , 시작과 동시에 처리 가능
 *              => 자동 로그인 , 데이터베이스 연결
 *              => 서버연결 
 *              => 메모리 저장시 호출
 *      ---------------------------
 *       **기능 설계 => 메소드 
 *      ---------------------------
 *   }
 *   ---------
 *   
 *    메소드 
 *     => 정의 : 한개의 기능을 수행하는 명령문의 집합
 *              ------------- 
 *              => 조립 : process()
 *              => main 에서 코딩을 하지 않는다
 *                 => process()만 호출
 *              => 로그인 처리 / 회원 가입 / 회원 수정 / 회원 탈퇴 
 *              => 목록 / 글쓰기 / 상세보기 / 수정 / 삭제 / 검색 
 *    => 1. 반복적인 문장이 있는 경우 (반복 제거)
 *       예) 
 *           오라클 연결
 *           --------
 *           목록 읽기 기능 
 *           오라클 연결 =>
 *           목록 읽기
 *           오라클 닫기 => 메소드 
 *           ---------
 *           
 *           글쓰기
 *           ---------
 *           오라클 연결 =>
 *           글쓰기 
 *           오라클 닫기
 *           ---------
 *           
 *           상세보기
 *           ---------
 *           오라클 연결
 *           상세보기
 *           오라클 닫기
 *           ---------
 *    => 2. 명령문을 기능별 분리 => 단락을 나눠서 처리
 *          = 가독성 : 보기가 편하다 (소스가 간결하다)
 *          = 유지보수 : 수정이 용이 
 *          = 채사용 : 어떤 클래스에서든 필요시마다 사용이 가능 
 *            Math.random() System.out.println()
 *          = 최적화 
 *     
 *     데이터 저장 => 저장된 데이터 가공 ==> 가공된 데이터 출력
 *        |             |
 *       변수          연산자/제어문
 *       배열          ----------
 *                     묶어서 처리=> 메소드
 *     ----------------------------------------------------
 *     
 *     
 *         리턴형             매개변수
 *     -------------------------------------
 *           O 
 *        Sing                O
 *     --------------------------------------------------------------
 *          O                  X
 *        double            random()
 *     --------------------------------------
 *         X                   O
 *      void printLn(string s]
 *      ---- 결과값 없다
 *     --------------------------------------
 *         X                    X ==> 사용 빈도 낮다 
 *         
 *     ------------------------------------
 *     3) 4) => 메소드 자체에서 출력
 *     
 *     => 결과각ㅄ을 받아서 출력
 *     => 메소드안에서 출력
 *     => return => void는 생략이가능
 *     
 *     
 *     자동생성
 *     ------
 *     import java.lang.*; => String , System ---
 *     => 메소드 : void일 경우에 생략을 하면 자동 첨부 
 */
public class 메소드_1 {
	// 4) 리턴형 / 매개변수가 없는 경우
	// => 메소드안에서 구구단을 출력
    static void gugudan()
    {
    	// void => 메소드안에서 출력 => 전체 처리를 한다
    	for(int i=1; i<=9; i++)
    	{
    		for(int j=2; j<=9; j++) // 단출력
    		{
    			System.out.printf("%2d*%2d=%2D\t");
    		}
    	}
    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		return; // 컴파일시에 return 이 없는 경우에는 자동으로 생성
		//return => 메소드 종료
		

	}

}
